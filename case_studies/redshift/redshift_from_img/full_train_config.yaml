---
defaults:
    - ../../../bliss/conf@_here_: base_config
    - _self_
    - override hydra/job_logging: stdout

mode: train

global_setting:
    min_flux_for_loss: 50  # you need to regenerate split_results after changing this number

variational_factors:
  - _target_: bliss.encoder.variational_dist.BernoulliFactor
    name: n_sources
    sample_rearrange: null
    nll_rearrange: null
    nll_gating: null
  - _target_: bliss.encoder.variational_dist.BernoulliFactor
    name: source_type
    sample_rearrange: "b ht wt -> b ht wt 1 1"
    nll_rearrange: "b ht wt 1 1 -> b ht wt"
    nll_gating: n_sources
  - _target_: bliss.encoder.variational_dist.TDBNFactor
    name: locs
    sample_rearrange: "b ht wt d -> b ht wt 1 d"
    nll_rearrange: "b ht wt 1 d -> b ht wt d"
    nll_gating: n_sources
  - _target_: bliss.encoder.variational_dist.LogNormalFactor
    name: star_fluxes
    dim: 6
    sample_rearrange: "b ht wt d -> b ht wt 1 d"
    nll_rearrange: "b ht wt 1 d -> b ht wt d"
    nll_gating: is_star
  - _target_: bliss.encoder.variational_dist.LogNormalFactor
    name: galaxy_fluxes
    dim: 6
    sample_rearrange: "b ht wt d -> b ht wt 1 d"
    nll_rearrange: "b ht wt 1 d -> b ht wt d"
    nll_gating: is_galaxy
  - _target_: bliss.encoder.variational_dist.NormalFactor
    name: redshifts
    sample_rearrange: "b ht wt -> b ht wt 1 1"
    nll_rearrange: "b ht wt 1 1 -> b ht wt"
    nll_gating: is_galaxy

encoder:
    _target_: bliss.encoder.encoder.Encoder
    survey_bands: ["g", "i", "r", "u", "y", "z"]
    tile_slen: 4
    tiles_to_crop: 1
    min_flux_for_loss: ${global_setting.min_flux_for_loss}
    min_flux_for_metrics: 100
    optimizer_params:
        lr: 1e-3
    scheduler_params:
        milestones: [32]
        gamma: 0.1
    image_normalizer:
      _target_: bliss.encoder.image_normalizer.ImageNormalizer
      bands: [0, 1, 2, 3, 4, 5]
      include_original: false
      include_background: false
      concat_psf_params: false
      num_psf_params: 4  # for SDSS, 4 for DC2
      log_transform_stdevs: []
      use_clahe: true
      clahe_min_stdev: 200
    matcher:
        _target_: bliss.encoder.metrics.CatalogMatcher
        dist_slack: 1.0
        mag_slack: null
        mag_band: 2  # SDSS r-band
    metrics:
        _target_: torchmetrics.MetricCollection
        _convert_: "partial"
        metrics:
          # detection_performance:
          #   _target_: bliss.encoder.metrics.DetectionPerformance
          #   mag_bin_cutoffs: [200, 400, 600, 800, 1000]
          #   bin_unit_is_flux: true
          # detection_performance_star:
          #   _target_: bliss.encoder.metrics.DetectionPerformance
          #   mag_bin_cutoffs: [200, 400, 600, 800, 1000]
          #   source_type_filter: "star"
          #   bin_unit_is_flux: true
          # detection_performance_galaxy:
          #   _target_: bliss.encoder.metrics.DetectionPerformance
          #   mag_bin_cutoffs: [200, 400, 600, 800, 1000]
          #   source_type_filter: "galaxy"
          #   bin_unit_is_flux: true
          # source_type_accuracy:
          #   _target_: bliss.encoder.metrics.SourceTypeAccuracy
          # flux_error:
          #   _target_: bliss.encoder.metrics.FluxError
          #   survey_bands: ${encoder.survey_bands}
          # galaxy_shape_error:
          #   _target_: bliss.encoder.metrics.GalaxyShapeError
          redshift_mearn_square_error:
            _target_: case_studies.redshift.redshift_from_img.metrics.RedshiftMeanSquaredError

train:
    trainer:
        logger:
            name: DC2_redshift_training
            version: DC2_redshift_test
            save_dir: ${paths.root}/case_studies/redshift/redshift_from_img/
        precision: 32
        strategy:
          _target_: pytorch_lightning.strategies.DDPStrategy
          process_group_backend: nccl
          timeout:
            _target_: datetime.timedelta
            seconds: 180000
        # val_check_interval: 0.25
        check_val_every_n_epoch: 1
        # devices: [0, 2, 3, 4]
        devices: [5]
        max_epochs: 1
    callbacks:
        checkpointing:
            _target_: pytorch_lightning.callbacks.ModelCheckpoint
            filename: encoder_{val/mode/Mean squared error:.6f}
            save_top_k: 5
            verbose: True
            #  monitor: val/_loss
            monitor: val/mode/Mean squared error
            mode: min
    data_source: ${surveys.dc2}
    pretrained_weights: null
    test_best: true


surveys:
    dc2:
        cat_path: ${paths.root}/case_studies/redshift/redshift_from_img/DC2_generate_catalog_output/merged_catalog_with_flux_over_50.pkl
        split_results_dir: /data/scratch/qiaozhih/DC2_split_result_all
