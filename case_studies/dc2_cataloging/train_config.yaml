---
defaults:
    - ../../bliss/conf@_here_: base_config
    - _self_
    - override hydra/job_logging: stdout

mode: train

my_variational_factors:
  - _target_: bliss.encoder.variational_dist.BernoulliFactor
    name: n_sources
    sample_rearrange: null
    nll_rearrange: null
    nll_gating: null
  - _target_: bliss.encoder.variational_dist.TDBNFactor
    name: locs
    sample_rearrange: "b ht wt d -> b ht wt 1 d"
    nll_rearrange: "b ht wt 1 d -> b ht wt d"
    nll_gating: n_sources
  - _target_: case_studies.dc2_cataloging.utils.variational_dist.BernoulliFactorReturnProbs
    name: source_type
    sample_rearrange: "b ht wt -> b ht wt 1 1"
    nll_rearrange: "b ht wt 1 1 -> b ht wt"
    nll_gating: n_sources
  - _target_: bliss.encoder.variational_dist.LogNormalFactor
    name: star_fluxes
    dim: 6
    sample_rearrange: "b ht wt d -> b ht wt 1 d"
    nll_rearrange: "b ht wt 1 d -> b ht wt d"
    nll_gating: is_star
  - _target_: bliss.encoder.variational_dist.LogNormalFactor
    name: galaxy_fluxes
    dim: 6
    sample_rearrange: "b ht wt d -> b ht wt 1 d"
    nll_rearrange: "b ht wt 1 d -> b ht wt d"
    nll_gating: is_galaxy

my_metrics:
  detection_performance:
    _target_: bliss.encoder.metrics.DetectionPerformance
    bin_cutoffs: [200, 400, 600, 800, 1000]
    bin_type: "Flux"
  detection_performance_star:
    _target_: bliss.encoder.metrics.DetectionPerformance
    bin_cutoffs: [200, 400, 600, 800, 1000]
    bin_type: "Flux"
    filter_list:
      - _target_: bliss.encoder.metrics.SourceTypeFilter
        filter_type: "star"
  detection_performance_galaxy:
    _target_: bliss.encoder.metrics.DetectionPerformance
    bin_cutoffs: [200, 400, 600, 800, 1000]
    bin_type: "Flux"
    filter_list:
      - _target_: bliss.encoder.metrics.SourceTypeFilter
        filter_type: "galaxy"
  detection_performance_one_source_mask:
    _target_: bliss.encoder.metrics.DetectionPerformance
    bin_cutoffs: [200, 400, 600, 800, 1000]
    bin_type: "Flux"
    filter_list:
      - _target_: case_studies.dc2_cataloging.utils.metrics.SourceCountFilter
        filter_source_count: "1m"
  detection_performance_two_sources_mask:
    _target_: bliss.encoder.metrics.DetectionPerformance
    bin_cutoffs: [200, 400, 600, 800, 1000]
    bin_type: "Flux"
    filter_list:
      - _target_: case_studies.dc2_cataloging.utils.metrics.SourceCountFilter
        filter_source_count: "2m"
  detection_performance_more_than_two_sources_mask:
    _target_: bliss.encoder.metrics.DetectionPerformance
    bin_cutoffs: [200, 400, 600, 800, 1000]
    bin_type: "Flux"
    filter_list:
      - _target_: case_studies.dc2_cataloging.utils.metrics.SourceCountFilter
        filter_source_count: "2plus"
  source_type_accuracy:
    _target_: bliss.encoder.metrics.SourceTypeAccuracy
    flux_bin_cutoffs: [200, 400, 600, 800, 1000]
  flux_error:
    _target_: bliss.encoder.metrics.FluxError
    survey_bands: ${encoder.survey_bands}

my_image_normalizers:
  asinh:
      _target_: bliss.encoder.image_normalizer.AsinhQuantileNormalizer
      q: [0.01, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.99, 0.999, 0.9999, 0.99999]

encoder:
    # _target_: case_studies.dc2_cataloging.utils.encoder.MultiDetectEncoder
    _target_: case_studies.dc2_cataloging.utils.encoder.EncoderAddingSourceMask
    survey_bands: ["u", "g", "r", "i", "z", "y"]
    reference_band: 2
    tile_slen: ${surveys.dc2.tile_slen}
    min_flux_for_loss: 100  # you need to regenerate split_results after changing this number
    min_flux_for_metrics: 100
    optimizer_params:
        lr: 1e-3
    scheduler_params:
        milestones: [32]
        gamma: 0.1
    image_normalizers: ${my_image_normalizers}
    var_dist:
        # _target_: case_studies.dc2_cataloging.utils.variational_dist.MultiVariationalDist
        _target_: case_studies.dc2_cataloging.utils.variational_dist.VariationalDistReturnProbs
        tile_slen: ${surveys.dc2.tile_slen}
        factors: ${my_variational_factors}
        # repeat_times: 2
    matcher:
        _target_: bliss.encoder.metrics.CatalogMatcher
        dist_slack: 1.0
        mag_slack: null
        mag_band: 2  # SDSS r-band
    mode_metrics:
        _target_: torchmetrics.MetricCollection
        _convert_: "partial"
        compute_groups: false
        metrics: ${my_metrics}
    sample_metrics:
        _target_: torchmetrics.MetricCollection
        _convert_: "partial"
        compute_groups: false
        metrics: ${my_metrics}
    sample_image_renders:
        _target_: torchmetrics.MetricCollection
        metrics:
          - _target_: bliss.encoder.sample_image_renders.PlotSampleImages
            frequency: 1
            restrict_batch: 0
            tiles_to_crop: 0
            tile_slen: ${surveys.dc2.tile_slen}
    use_double_detect: true
    use_checkerboard: true

train:
    trainer:
        logger:
            name: DC2_cataloging_exp_07
            version: exp_07-15-1  # change it before running the code
        devices: [7]  # change it before running the code
        use_distributed_sampler: false  # disable this because we use the self-defined distributed sampler
        precision: 32-true
    data_source: ${surveys.dc2}
    pretrained_weights: null
    seed: 9292
