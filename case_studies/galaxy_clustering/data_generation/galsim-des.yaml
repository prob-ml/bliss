# This file uses GalSim to generate image data from catalogs of galaxy clusters
# Can be called directly from the command line using galsim galsim-des.yaml
# Inputs are catalogs (stored as .dat files) in the /catalogs/ directory
# Outputs are corresponding .fits files stored in the /galsim_des_data/ directory
# Catalog Columns:
#   0: RA
#   1: DEC
#   2: X
#   3: Y
#   4: MEM
#   5: FLUX_R
#   6: FLUX_G
#   7: FLUX_I
#   8: FLUX_Z
#   9: FLUX_Y
#   10: HLR
#   11: FRACDEV
#   12: G1
#   13: G2
#   14: Z
#   15: SOURCE_TYPE

variables :
  nfiles : 100
  image_size: 4800
  input_dir : /home/kapnadak/bliss/case_studies/galaxy_clustering/data/catalogs
  output_dir : /home/kapnadak/bliss/case_studies/galaxy_clustering/data/images

psf:
    type: Convolve

    # This means the psf should change per output file, not per object as would be the default.
    index_key : file_num

    items:
    # The atmospheric component
    -   type: Kolmogorov
        # To avoid PSFs that were "too round", the ellipticity was drawn from a uniform
        # distribution from sqrt(1.e-4) to sqrt(9.e-4), based on an estimate of the
        # typical variance of e in ground-based imaging.
        ellip:
            type: EBeta
            e:
                type: Random
                min: 0.01
                max: 0.03
            beta:
                type: Random

        # The seeing is taken from a plausible distribution of seeing values
        # ranging from 0.6 to 1.1.
        fwhm:
            type: RandomDistribution
            x: [ 0.6, 0.7, 0.8, 0.9, 1.0, 1.1 ]
            f: [  0., 10., 20., 40., 30.,  0. ]

    # The optical component
    -   type: OpticalPSF
        # Take lambda = 800 nm.  D = 4 m.  lam/D = 0.04 arcsec
        lam_over_diam: "$800 * 1.e-9 / 4 * 206265"

        # I don't know what the right value of this is.  This is a guess.
        obscuration: 0.3

        # DECam has 4 struts.  Not sure what strut_thick or strut_angle is appropriate here.
        # So these are just guesses.
        nstruts: 4
        strut_thick: 0.05  # In units of pupil diameter.
        strut_angle: 10 degrees

        # According to Aaron Roodman, for DES the appropriate rms values are
        # [ 0.13, 0.13, 0.14, 0.06, 0.06, 0.05, 0.06, 0.03 ]
        defocus: { type: RandomGaussian, sigma: 0.13 }
        astig1: { type: RandomGaussian, sigma: 0.13 }
        astig2: { type: RandomGaussian, sigma: 0.14 }
        coma1: { type: RandomGaussian, sigma: 0.06 }
        coma2: { type: RandomGaussian, sigma: 0.06 }
        trefoil1: { type: RandomGaussian, sigma: 0.05 }
        trefoil2: { type: RandomGaussian, sigma: 0.06 }
        spher: { type: RandomGaussian, sigma: 0.03 }

        # The original GREAT3 runs used a keyword max_size to improve the efficiency of OpticalPSF.
        # However, we now believe that this keyword introduces additional aliasing and have
        # deprecated its use in GalSim v1.4.  We have retained the original description in the
        # doubly commented block below.

        # # Sometimes the OpticalPSF wants to make a very large image of the PSF.  But if the
        # # PSF image is larger than the postage stamp onto which we will draw the object,
        # # the larger area is mostly wasted.  Setting max_size to the size of the postage stamp
        # # we will eventually draw onto helps avoid wasted calculations.
        # # This is in arcsec, so max_size = stamp_size * pixel_scale
        # # We're using a non-square wcs, so there isn't a well-defined pixel scale.  Use
        # # the maxLinearScale to get the maximum "pixel scale" for the parallelogram.
        # max_size: "$@image.size * wcs.maxLinearScale()"

        suppress_warning: true

image :

  nproc : 24
  type : Scattered
  pixel_scale : 0.26
  xsize : '@variables.image_size'
  ysize : '@variables.image_size'
  stamp_size : 100

  random_seed : 8241573

  gsparams : {maximum_fft_size : 50000}

  noise:
    type: Gaussian
    variance:
      type: Random
      min: 0.002
      max: 0.006

stamp :

  draw_method :
    type : List
    items : [ fft, phot ]

  image_pos :
    type : XY
    x : { type: Catalog, col: 2 }
    y : { type: Catalog, col: 3 }

input :
  catalog :
    dir : '@variables.input_dir'
    file_name :
      type : FormattedStr
      format : "galsim_des_%03d.dat"
      items :
      - { type : Sequence, nitems : '@variables.nfiles'}

---

gal :

  type : Gaussian
  half_light_radius : { type: Catalog, col: 10 }
  flux : { type: Catalog, col: 5 } #using R band

  shear :
    type : G1G2
    g1 : { type: Catalog, col: 12}
    g2 : { type: Catalog, col: 13 }

output :
  type : Fits
  dir : '@variables.output_dir'
  file_name :
    type : FormattedStr
    format : "galsim_des_%03d_r.fits"
    items :
    - { type : Sequence, nitems: '@variables.nfiles'}

  nfiles : '@variables.nfiles'

---

gal :

  type : Gaussian
  half_light_radius : { type: Catalog, col: 10 }
  flux : { type: Catalog, col: 6 } #using G band

  shear :
    type : G1G2
    g1 : { type: Catalog, col: 12 }
    g2 : { type: Catalog, col: 13 }

output :
  type : Fits
  dir : '@variables.output_dir'
  file_name :
    type : FormattedStr
    format : "galsim_des_%03d_g.fits"
    items :
    - { type : Sequence, nitems: '@variables.nfiles'}

  nfiles : '@variables.nfiles'

---

gal :

  type : Gaussian
  half_light_radius : { type: Catalog, col: 10 }
  flux : { type: Catalog, col: 7 } #using I band

  shear :
    type : G1G2
    g1 : { type: Catalog, col: 12 }
    g2 : { type: Catalog, col: 13 }

output :
  type : Fits
  dir : '@variables.output_dir'
  file_name :
    type : FormattedStr
    format : "galsim_des_%03d_i.fits"
    items :
    - { type : Sequence, nitems: '@variables.nfiles'}

  nfiles : '@variables.nfiles'

---

gal :

  type : Gaussian
  half_light_radius : { type: Catalog, col: 10 }
  flux : { type: Catalog, col: 8 } #using Z band

  shear :
    type : G1G2
    g1 : { type: Catalog, col: 12 }
    g2 : { type: Catalog, col: 13 }

output :
  type : Fits
  dir : '@variables.output_dir'
  file_name :
    type : FormattedStr
    format : "galsim_des_%03d_z.fits"
    items :
    - { type : Sequence, nitems: '@variables.nfiles'}

  nfiles : '@variables.nfiles'

---

gal :

  type : Gaussian
  half_light_radius : { type: Catalog, col: 10 }
  flux : { type: Catalog, col: 9 } #using Y band

  shear :
    type : G1G2
    g1 : { type: Catalog, col: 12}
    g2 : { type: Catalog, col: 13 }

output :
  type : Fits
  dir : '@variables.output_dir'
  file_name :
    type : FormattedStr
    format : "galsim_des_%03d_Y.fits"
    items :
    - { type : Sequence, nitems: '@variables.nfiles'}

  nfiles : '@variables.nfiles'
