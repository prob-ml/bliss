---
defaults:
    - _self_
    - override /hydra/job_logging: stdout

# completely disable hydra logging
# https://github.com/facebookresearch/hydra/issues/910
hydra:
    output_subdir: null
    run:
        dir: .

paths:
    sdss: /data/scratch/sdss
    decals: /data/scratch/decals
    des: /data/scratch/des
    dc2: /data/scratch/dc2local
    cached_data: null  # TODO: override in other configs
    output: ${oc.env:HOME}/bliss_output

# this prior is sdss-like; the flux parameters were fit using SDSS catalogs
prior:
    _target_: bliss.simulator.prior.CatalogPrior
    survey_bands: ["u", "g", "r", "i", "z"]  # SDSS available band filters
    reference_band: 2  # SDSS r-band
    star_color_model_path: ${paths.sdss}/color_models/star_gmm_nmgy.pkl
    gal_color_model_path: ${paths.sdss}/color_models/gal_gmm_nmgy.pkl
    n_tiles_h: 20
    n_tiles_w: 20
    tile_slen: 4
    batch_size: 64
    max_sources: 1
    mean_sources: 0.01  # 0.0025 is more realistic for SDSS but training takes more iterations
    min_sources: 0
    prob_galaxy: 0.5144
    star_flux:
        exponent: 0.4689157382430609
        # truncation: 613313.768995269
        truncation: 1000
        loc: -0.5534648001193676
        scale: 1.1846035501201129
    galaxy_flux: 1.5609458661807678
        # truncation: 28790.449063519092
        truncation: 1000
        loc: -3.29383532288203
        scale: 3.924799999613338
    galaxy_a_concentration: 0.39330758068481686
    galaxy_a_loc: 0.8371888967872619
    galaxy_a_scale: 4.432725319432478
    galaxy_a_bd_ratio: 2.0

surveys:
    sdss:
        _target_: bliss.surveys.sdss.SloanDigitalSkySurvey
        dir_path: ${paths.sdss}
        fields:
            - run: 94
              camcol: 1
              fields: ${range:12,482,20}
            - run: 125
              camcol: 1
              fields: ${range:15,565,20,435}
            - run: 752
              camcol: 1
              fields: ${range:15,685,20}
            - run: 3900
              camcol: 6
              fields: ${range:16,596,20,76}
        psf_config:
            pixel_scale: 0.396
            psf_slen: 25
        align_to_band: null  # we should set this to 2 (r-band)
        load_image_data: false

simulator:
    _target_: bliss.simulator.simulated_dataset.SimulatedDataset
    survey: ${surveys.sdss}
    prior: ${prior}
    n_batches: 128
    coadd_depth: 1
    num_workers: 32
    valid_n_batches: 10  # 256
    fix_validation_set: true

cached_simulator:
    _target_: bliss.cached_dataset.CachedSimulatedDataModule
    batch_size: 64
    splits: 0:80/80:90/90:100  # train/val/test splits as percent ranges
    num_workers: 8
    cached_data_path: ${paths.cached_data}
    train_transforms:
        - _target_: bliss.data_augmentation.RotateFlipTransform
    nontrain_transforms: []

variational_factors:
    - _target_: bliss.encoder.variational_dist.BernoulliFactor
      name: n_sources
      sample_rearrange: null
      nll_rearrange: null
      nll_gating: null
    - _target_: bliss.encoder.variational_dist.TDBNFactor
      name: locs
      sample_rearrange: "b ht wt d -> b ht wt 1 d"
      nll_rearrange: "b ht wt 1 d -> b ht wt d"
      nll_gating:
        _target_: bliss.encoder.variational_dist.SourcesGating
    - _target_: bliss.encoder.variational_dist.BernoulliFactor
      name: source_type
      sample_rearrange: "b ht wt -> b ht wt 1 1"
      nll_rearrange: "b ht wt 1 1 -> b ht wt"
      nll_gating:
        _target_: bliss.encoder.variational_dist.SourcesGating
    - _target_: bliss.encoder.variational_dist.LogNormalFactor
      name: star_fluxes
      dim: 5
      sample_rearrange: "b ht wt d -> b ht wt 1 d"
      nll_rearrange: "b ht wt 1 d -> b ht wt d"
      nll_gating:
        _target_: bliss.encoder.variational_dist.StarGating
    - _target_: bliss.encoder.variational_dist.LogNormalFactor
      name: galaxy_fluxes
      dim: 5
      sample_rearrange: "b ht wt d -> b ht wt 1 d"
      nll_rearrange: "b ht wt 1 d -> b ht wt d"
      nll_gating:
        _target_: bliss.encoder.variational_dist.GalaxyGating
    - _target_: bliss.encoder.variational_dist.LogitNormalFactor
      name: galaxy_disk_frac
      sample_rearrange: "b ht wt d -> b ht wt 1 d"
      nll_rearrange: "b ht wt 1 1 -> b ht wt 1"
      nll_gating:
        _target_: bliss.encoder.variational_dist.GalaxyGating
    - _target_: bliss.encoder.variational_dist.LogitNormalFactor
      name: galaxy_beta_radians
      high: 3.1415926
      sample_rearrange: "b ht wt d -> b ht wt 1 d"
      nll_rearrange: "b ht wt 1 1 -> b ht wt 1"
      nll_gating:
        _target_: bliss.encoder.variational_dist.GalaxyGating
    - _target_: bliss.encoder.variational_dist.LogitNormalFactor
      name: galaxy_disk_q
      sample_rearrange: "b ht wt d -> b ht wt 1 d"
      nll_rearrange: "b ht wt 1 1 -> b ht wt 1"
      nll_gating:
        _target_: bliss.encoder.variational_dist.GalaxyGating
    - _target_: bliss.encoder.variational_dist.LogNormalFactor
      name: galaxy_a_d
      sample_rearrange: "b ht wt d -> b ht wt 1 d"
      nll_rearrange: "b ht wt 1 1 -> b ht wt 1"
      nll_gating:
        _target_: bliss.encoder.variational_dist.GalaxyGating
    - _target_: bliss.encoder.variational_dist.LogitNormalFactor
      name: galaxy_bulge_q
      sample_rearrange: "b ht wt d -> b ht wt 1 d"
      nll_rearrange: "b ht wt 1 1 -> b ht wt 1"
      nll_gating:
        _target_: bliss.encoder.variational_dist.GalaxyGating
    - _target_: bliss.encoder.variational_dist.LogNormalFactor
      name: galaxy_a_b
      sample_rearrange: "b ht wt d -> b ht wt 1 d"
      nll_rearrange: "b ht wt 1 1 -> b ht wt 1"
      nll_gating:
        _target_: bliss.encoder.variational_dist.GalaxyGating

psf_asinh_normalizers:
    psf:
        _target_: bliss.encoder.image_normalizer.PsfAsImage
        num_psf_params: 6  # 6 for SDSS, 4 for DC2, 10 for DES
    asinh:
        _target_: bliss.encoder.image_normalizer.AsinhQuantileNormalizer
        q: [0.01, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.99, 0.999, 0.9999, 0.99999]

asinh_only_normalizer:
    asinh:
        _target_: bliss.encoder.image_normalizer.AsinhQuantileNormalizer
        q: [0.01, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.99, 0.999, 0.9999, 0.99999]

all_normalizers:
    psf:
        _target_: bliss.encoder.image_normalizer.PsfAsImage
        num_psf_params: 6  # 6 for SDSS, 4 for DC2, 10 for DES
    clahe:
        _target_: bliss.encoder.image_normalizer.ClaheNormalizer
        min_stdev: 200
    asinh:
        _target_: bliss.encoder.image_normalizer.AsinhQuantileNormalizer
        q: [0.01, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.99, 0.999, 0.9999, 0.99999]

metrics:
    detection_performance:
        _target_: bliss.encoder.metrics.DetectionPerformance
        bin_cutoffs: [17.777, 19.101, 19.781, 20.258, 20.625, 20.940, 21.227, 21.495, 21.746, 22.000]
        ref_band: 2
        bin_type: mag
    source_type_accuracy:
        _target_: bliss.encoder.metrics.SourceTypeAccuracy
        bin_cutoffs: [17.777, 19.101, 19.781, 20.258, 20.625, 20.940, 21.227, 21.495, 21.746, 22.000]
        ref_band: 2
        bin_type: mag
    flux_error:
        _target_: bliss.encoder.metrics.FluxError
        bin_cutoffs: [17.777, 19.101, 19.781, 20.258, 20.625, 20.940, 21.227, 21.495, 21.746, 22.000]
        ref_band: 2
        survey_bands: ${encoder.survey_bands}
        bin_type: mag
    gal_shape_error:
        _target_: bliss.encoder.metrics.GalaxyShapeError
        bin_cutoffs: [17.777, 19.101, 19.781, 20.258, 20.625, 20.940, 21.227, 21.495, 21.746, 22.000]
        ref_band: 2
        bin_type: mag

encoder:
    _target_: bliss.encoder.encoder.Encoder
    survey_bands: ["u", "g", "r", "i", "z"]
    reference_band: 2  # SDSS r-band
    tile_slen: ${prior.tile_slen}
    optimizer_params:
        lr: 1e-3
    scheduler_params:
        milestones: [32]
        gamma: 0.1
    image_normalizers: null  # TODO: override in other configs
    var_dist: null  # TODO: override in other configs
    matcher:
        _target_: bliss.encoder.metrics.CatalogMatcher
        dist_slack: 1.0
        mag_slack: null
        mag_band: 2  # SDSS r-band
    mode_metrics:
        _target_: torchmetrics.MetricCollection
        _convert_: "partial"
        metrics: ${metrics}
    sample_metrics: null
    sample_image_renders:
        _target_: torchmetrics.MetricCollection
        metrics:
            - _target_: bliss.encoder.sample_image_renders.PlotSampleImages
              frequency: 1
              restrict_batch: 0
              tiles_to_crop: 0
              tile_slen: ${prior.tile_slen}
    use_double_detect: false
    use_checkerboard: false

#######################################################################
# things above matter only if they are referenced below

mode: train

train:
    trainer:
        _target_: pytorch_lightning.Trainer
        logger:
            _target_: pytorch_lightning.loggers.TensorBoardLogger
            save_dir: ${paths.output}
            name: null  # TODO: override in other configs
            version: null  # TODO: override in other configs
            default_hp_metric: false
        reload_dataloaders_every_n_epochs: 0
        check_val_every_n_epoch: 1
        log_every_n_steps: 10  # corresponds to n_batches
        min_epochs: 1
        max_epochs: 50
        accelerator: "gpu"
        devices: 1
        precision: 32-true
    callbacks:
        checkpointing:
            _target_: pytorch_lightning.callbacks.ModelCheckpoint
            filename: best_encoder
            save_top_k: 1
            verbose: True
            monitor: val/_loss
            mode: min
            save_on_train_epoch_end: False
            auto_insert_metric_name: False
        early_stopping:
            _target_: pytorch_lightning.callbacks.early_stopping.EarlyStopping
            monitor: val/_loss
            mode: min
            patience: 10
    data_source: ${cached_simulator}
    encoder: ${encoder}
    seed: 12345
    pretrained_weights: null
    ckpt_path: null
    matmul_precision: high

predict:
    dataset: ${surveys.sdss}
    trainer:
        _target_: pytorch_lightning.Trainer
        accelerator: "gpu"
        precision: ${train.trainer.precision}
    encoder: ${encoder}
    weight_save_path: null
    device: "cuda:0"
